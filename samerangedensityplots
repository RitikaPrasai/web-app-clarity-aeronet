# prompt: improve the above plot so that all the plots have same x-limit range and y-limit range. For example in these plots the maximum values is 1.4 so put 1.4 in all the x-limit and y-limit

import pandas as pd
import numpy as np
from scipy.stats import linregress
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error
import matplotlib.pyplot as plt 
import seaborn as sns  
import os


def IOA(p,o):
  ioa = 1 -(np.sum((p-o)**2))/(np.sum((np.abs(p-np.mean(o))+np.abs(o-np.mean(o)))**2))
  return ioa

# Directory containing the data files
data_dir =r"C:\Users\rprasai\OneDrive - NASA\aeronet_1600_test\merged_files_3"

# Output directory for saving plots
output_dir = r"C:\Users\rprasai\OneDrive - NASA\aeronet_1600_test\samerangedensityplots"
custom_xlim = (0, 1.4)  # Set your desired x-limit range here
custom_ylim = (0, 1.4)  # Set your desired y-limit range here

if not os.path.exists(output_dir):
    os.makedirs(output_dir)

for filename in os.listdir(data_dir):
    if filename.endswith('.csv'):
        filepath = os.path.join(data_dir, filename)
        df = pd.read_csv(filepath) 

        # Remove -999 values
        df = df[(df['AOD500_AVG'] != -999) & (df['TOTEXTTAU'] != -999)]

        x = df['AOD500_AVG']
        y = df['TOTEXTTAU']

        if x.empty or y.empty:
            print(f"The data file {filename} is empty after removing invalid values.")
            continue

        # Calculate metrics 
        RMSE = np.sqrt(np.mean((y-x)**2))
        rRMSE = (RMSE/np.mean(y))*100.0
        slope = linregress(x, y)[0]
        intercept = linregress(x, y)[1]
        R = linregress(x, y)[2]
        R2 = R**2
        N = len(x)
        lmfit = (slope*x)+intercept
        MAE = mean_absolute_error(x, y)
        MBE = np.mean(y - x)
        MAPE=mean_absolute_percentage_error(x, y)
        ioa = IOA(y,x)

        # Plotting
        plt.figure(figsize=(8, 8))  
        
        # Create density plot using Seaborn's jointplot
        g = sns.jointplot(x=x, y=y, kind="kde", fill=True, cmap='Blues', height=8)
        
        # Plot the regression line on the jointplot
        g.ax_joint.plot(x, lmfit, color='red', linewidth=2) 
        X = np.linspace(0, max(x.max(), y.max()) * 1.1, 10)
        Y = np.linspace(0, max(x.max(), y.max()) * 1.1, 10)
        g.ax_joint.plot(X, Y, color='black', linestyle='--', linewidth=2) 

        # Annotate with metrics 
        textstr = '\n'.join((
            r'Y = %.2f X + %.2f' % (slope, intercept),
            r'N = %d' % (N),
            r'R\u00b2 = %.2f' % (R2),
            r'RMSE = %.2f' % (RMSE),
            r'rRMSE = %.2f %%' % (rRMSE),
            r'MAE = %.2f' % (MAE),
            r'MBE = %.2f' % (MBE),
            r'MAPE = %.2f %%' % (MAPE),
            r'IOA = %.2f' % (ioa)))

        props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
        plt.text(0.05, 0.95, textstr, transform=g.ax_joint.transAxes, fontsize=12,
                verticalalignment='top', bbox=props)

        # Set plot labels, title, and limits
        g.set_axis_labels('AERONET AOD500_AVG', 'MERRA2 AOD', fontsize=12) 
        plt.suptitle(f'Density Plot with Metrics - {filename}', y=1.02, fontsize=14) 
        
        # Set the x and y limits for the plot
        g.ax_joint.set_xlim(custom_xlim)
        g.ax_joint.set_ylim(custom_ylim)

        # Save the plot
        plot_filename = os.path.splitext(filename)[0] + '.png'
        plot_filepath = os.path.join(output_dir, plot_filename)
        plt.savefig(plot_filepath)
        plt.close()  # Close the plot to free up memory

        print(f"Plot for {filename} saved to {plot_filepath}")
